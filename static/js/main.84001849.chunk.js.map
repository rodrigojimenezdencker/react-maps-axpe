{"version":3,"sources":["Components/Searcher/Searcher.js","Components/Map/Map.js","actions/index.js","constants/index.js","App.js","serviceWorker.js","reducers/index.js","store/index.js","index.js"],"names":["Searcher","props","className","onPlaceSelected","types","API_KEY","Geocode","setApiKey","connectedMap","place","geometry","latValue","location","lat","lngValue","lng","addMarker","setState","mapPosition","state","center","map","CustomMap","withScriptjs","withGoogleMap","google","defaultZoom","zoom","defaultCenter","markers","marker","i","key","draggable","position","undefined","this","googleMapURL","loadingElement","style","height","containerElement","mapElement","Component","Map","connect","dispatch","Marker","type","payload","App","Boolean","window","hostname","match","initialState","rootReducer","action","concat","store","createStore","applyMiddleware","logger","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mWAIaA,G,OAAW,SAACC,GAAD,OACpB,kBAAC,IAAD,CACIC,UAAU,WACVC,gBAAiBF,EAAME,gBACvBC,MAAO,CAAC,iB,QCDhB,IAAMC,EAAU,0CAChBC,IAAQC,UAAUF,GAElB,IAYMG,E,kDACL,WAAYP,GAAQ,IAAD,8BAClB,cAAMA,IASPE,gBAAkB,SAACM,GAClB,IAAKA,EAAMC,SACV,OAAO,EAER,IACCC,EAAWF,EAAMC,SAASE,SAASC,MACnCC,EAAWL,EAAMC,SAASE,SAASG,MACpC,EAAKd,MAAMe,UAAU,CAAEH,IAAKF,EAAUI,IAAKD,IAC3C,EAAKG,SAAS,CACbC,YAAa,CACZL,IAAKF,EACLI,IAAKD,MAnBP,EAAKK,MAAQ,CACZD,YAAa,CACZL,IAAK,EAAKZ,MAAMmB,OAAOP,IACvBE,IAAK,EAAKd,MAAMmB,OAAOL,MALP,E,qDA2BT,IAwBLM,EAxBI,OACFC,EAAYC,uBACjBC,yBACC,SAAAvB,GAAK,OACJ,kBAAC,YAAD,CAAWwB,OAAQ,EAAKxB,MAAMwB,OAC7BC,YAAa,EAAKzB,MAAM0B,KACxBC,cAAe,CAAEf,IAAK,EAAKM,MAAMD,YAAYL,IAAKE,IAAK,EAAKI,MAAMD,YAAYH,MAE7E,EAAKd,MAAM4B,QAAQR,KAAI,SAACS,EAAQC,GAAT,OACvB,kBAAC,SAAD,CACCC,IAAKD,EACLN,OAAQ,EAAKxB,MAAMwB,OACnBQ,WAAW,EACXC,SAAU,CAAErB,IAAKiB,EAAOjB,IAAKE,IAAKe,EAAOf,UAG3C,kBAAC,EAAD,CACCZ,gBAAiB,EAAKA,gBACtBC,MAAO,CAAC,oBAuBb,YAhB8B+B,IAA1BC,KAAKnC,MAAMmB,OAAOP,MACrBQ,EAAM,6BACL,kBAACC,EAAD,CACCe,aAAY,sDAAiDhC,EAAjD,qBACZiC,eACC,yBAAKC,MAAO,CAAEC,OAAO,UAEtBC,iBACC,yBAAKF,MAAO,CAAEC,OAAQJ,KAAKnC,MAAMuC,UAElCE,WACC,yBAAKH,MAAO,CAAEC,OAAO,cAKjBnB,M,GArEiBsB,aA0EZC,EADHC,aArFY,SAAA1B,GACvB,MAAO,CACNU,QAASV,EAAMU,YAIU,SAAAiB,GAC1B,MAAO,CACN9B,UAAW,SAAC+B,GAAD,OAAYD,ECfd,CAAEE,KCHa,aDGKC,QDeaF,QA6EhCF,CAA6CrC,GG9E1C0C,G,8KAXX,OACE,kBAAC,EAAD,CACEzB,OAAQW,KAAKnC,MAAMwB,OACnBL,OAAQ,CAAEP,IAAK,WAAYE,IAAK,WAChCyB,OAAO,QACPb,KAAM,S,GAPIgB,cCQEQ,QACW,cAA7BC,OAAOxC,SAASyC,UAEe,UAA7BD,OAAOxC,SAASyC,UAEhBD,OAAOxC,SAASyC,SAASC,MACvB,2D,YChBAC,EAAe,CACjB1B,QAAS,IAcE2B,MAXf,WAAoD,IAA/BrC,EAA8B,uDAAtBoC,EAAcE,EAAQ,uCAC/C,OAAQA,EAAOT,MACX,IHRkB,aGSd,MAAO,CACHnB,QAASV,EAAMU,QAAQ6B,OAAOD,EAAOR,UAE7C,QACI,OAAO9B,I,kBCPJwC,EAFDC,YAAYJ,EAAaK,YAAgBC,MCIvDC,IAASC,OACP,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,OAEFM,SAASC,eAAe,SHuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.84001849.chunk.js","sourcesContent":["import React from 'react';\r\nimport Autocomplete from 'react-google-autocomplete';\r\nimport './Searcher.css';\r\n\r\nexport const Searcher = (props) => (\r\n    <Autocomplete\r\n        className=\"searcher\"\r\n        onPlaceSelected={props.onPlaceSelected}\r\n        types={['(regions)']}\r\n    />\r\n)\r\n","import React, { Component } from 'react';\r\nimport { withGoogleMap, GoogleMap, withScriptjs, Marker } from \"react-google-maps\";\r\nimport Geocode from \"react-geocode\";\r\nimport { Searcher } from '../Searcher/Searcher';\r\nimport { connect } from \"react-redux\";\r\nimport { addMarker } from '../../actions';\r\n\r\nconst API_KEY = 'AIzaSyB4okjTTnndv_nqIU75IB54R2PZFfy1tVw';\r\nGeocode.setApiKey(API_KEY);\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tmarkers: state.markers\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\treturn {\r\n\t\taddMarker: (Marker) => dispatch(addMarker(Marker))\r\n\t}\r\n}\r\n\r\nclass connectedMap extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tmapPosition: {\r\n\t\t\t\tlat: this.props.center.lat,\r\n\t\t\t\tlng: this.props.center.lng\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tonPlaceSelected = (place) => {\r\n\t\tif (!place.geometry) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tconst\r\n\t\t\tlatValue = place.geometry.location.lat(),\r\n\t\t\tlngValue = place.geometry.location.lng();\r\n\t\tthis.props.addMarker({ lat: latValue, lng: lngValue })\r\n\t\tthis.setState({\r\n\t\t\tmapPosition: {\r\n\t\t\t\tlat: latValue,\r\n\t\t\t\tlng: lngValue\r\n\t\t\t}\r\n\t\t})\r\n\t};\r\n\r\n\r\n\trender() {\r\n\t\tconst CustomMap = withScriptjs(\r\n\t\t\twithGoogleMap(\r\n\t\t\t\tprops => (\r\n\t\t\t\t\t<GoogleMap google={this.props.google}\r\n\t\t\t\t\t\tdefaultZoom={this.props.zoom}\r\n\t\t\t\t\t\tdefaultCenter={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{this.props.markers.map((marker, i) =>\r\n\t\t\t\t\t\t\t<Marker\r\n\t\t\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\t\t\tgoogle={this.props.google}\r\n\t\t\t\t\t\t\t\tdraggable={false}\r\n\t\t\t\t\t\t\t\tposition={{ lat: marker.lat, lng: marker.lng }}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t<Searcher\r\n\t\t\t\t\t\t\tonPlaceSelected={this.onPlaceSelected}\r\n\t\t\t\t\t\t\ttypes={['(regions)']}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</GoogleMap>\r\n\t\t\t\t)\r\n\t\t\t)\r\n\t\t);\r\n\t\tlet map;\r\n\t\tif (this.props.center.lat !== undefined) {\r\n\t\t\tmap = <div>\r\n\t\t\t\t<CustomMap\r\n\t\t\t\t\tgoogleMapURL={`https://maps.googleapis.com/maps/api/js?key=${API_KEY}&libraries=places`}\r\n\t\t\t\t\tloadingElement={\r\n\t\t\t\t\t\t<div style={{ height: `100%` }} />\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcontainerElement={\r\n\t\t\t\t\t\t<div style={{ height: this.props.height }} />\r\n\t\t\t\t\t}\r\n\t\t\t\t\tmapElement={\r\n\t\t\t\t\t\t<div style={{ height: `100%` }} />\r\n\t\t\t\t\t}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t}\r\n\t\treturn (map)\r\n\t}\r\n}\r\n\r\nconst Map = connect(mapStateToProps, mapDispatchToProps)(connectedMap);\r\nexport default Map\r\n","import { ADD_MARKER } from '../constants';\r\n\r\nexport function addMarker(payload) {\r\n    return { type: ADD_MARKER, payload };\r\n  }","export const ADD_MARKER = \"ADD_MARKER\";","import React, { Component } from 'react';\nimport Map from './Components/Map/Map';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Map\n        google={this.props.google}\n        center={{ lat: 41.3922909, lng: 2.1655837 }}\n        height='100vh'\n        zoom={10}\n      />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ADD_MARKER } from '../constants';\r\n\r\nconst initialState = {\r\n    markers: []\r\n}\r\n\r\nfunction rootReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case ADD_MARKER:\r\n            return {\r\n                markers: state.markers.concat(action.payload)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default rootReducer;","import { applyMiddleware, createStore } from 'redux';\r\nimport rootReducer from '../reducers';\r\nimport logger from 'redux-logger';\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(logger));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}